[tool.poetry]
name = "steamio"
version = "1.0.0a"
description = "A Python wrapper for the Steam API"
authors = ["Gobot1234 <gobot1234yt@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = ["steam.py", "steam", "steamio", "steam-api"]
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
include = [
    "LICENSE",
    "steam/__metadata__.py",
    "steam/py.typed",
    "steam/ext/__init__.pyi",
]
packages = [
    {include = "steam"},
]

[tool.poetry.build]
script = "poetry_build.py"
generate-setup-file = false

[tool.poetry.urls]
"Documentation" = "https://steam-py.github.io/docs/latest"
"Code" = "https://github.com/Gobot1234/steam.py"
"Bug Tracker" = "https://github.com/Gobot1234/steam.py/issues"

[tool.poetry.dependencies]
python = "^3.10"
aiohttp = "^3.8"
beautifulsoup4 = "^4.10"
cryptography = ">=40,<42"
betterproto = "2.0.0b6"
typing-extensions = "4.7.1"
vdf = "^3.4"
taskgroup = {git = "https://github.com/Gobot1234/taskgroup", rev = "default", python = "<3.11"}

[tool.poetry.group.speedups]
optional = true
[tool.poetry.group.speedups.dependencies]
aiohttp = {version = "^3.8", extras = ["speedups"]}
lxml = "^4.8.0"
# orvdf = "^1.0.0"
orjson = "^3.6.8"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
sphinx = ">=5,<8"
myst-parser = ">=0.19,<2.1"
mypy = "^1.0"
sphinxcontrib_trio = "^1.1.2"
sphinx-copybutton = "^0.5.0"
sphinx-codeautolink = ">=0.14,<0.16"
csscompressor = "^0.9.5"
htmlmin = "^0.1.12"
rjsmin = "^1.2.0"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
black = "^23.1"
isort = "^5.10"
pytest = "^7.1"
pytest-asyncio = ">=0.20,<0.22"
pre-commit = "^3.1"
poethepoet = ">=0.19,<0.22"
blacken-docs = "^1.12"
ruff = ">=0.0.261,<0.0.283"
tomli = {version = "~2", python = "<3.11"}
hypothesis = "^6.82.0"

[tool.poe.tasks]
fmt = {sequence = [
    {script = "scripts.blacken_docs_correctly:main"},
    {cmd = "black ."},
    {cmd = "ruff . --select=I --fix"}
], ignore_fail = true, help = "Format the code"}
doc = {cmd = "sphinx-build -b html -T -W --keep-going docs/ docs/_build", help = "Build the documentation"}  # TODO -n
add-cms = {script = "scripts.add_cms:main", help = "Add a default list of CMs for when the API is down"}

[tool.poe.tasks.test]
help = "Run the tests"
control.expr = "type"
[tool.poe.tasks.test.args.type]
required = true
positional = true
help = "Which types of tests to run can be one of 'full', 'unit' or 'integration'"
    [[tool.poe.tasks.test.switch]]
    case = ["full", "all"]
    cmd = "pytest tests"

    [[tool.poe.tasks.test.switch]]
    case = "unit"
    cmd  = "pytest tests/unit"

    [[tool.poe.tasks.test.switch]]
    case = "integration"
    cmd  = "pytests tests/integration"

[tool.poe.tasks.decode]
script = "scripts.decode:main"
help = "Decode a recieved message from the Steam WS"
[tool.poe.tasks.decode.args.input_message]
required = true
positional = true
help = "A base64 encoded protobufs message from Steam to decode"

[tool.black]
line-length = 120
python_version = "py310"

[tool.blacken-docs]
line-length = 120
target-version = ["py310"]

[tool.ruff]
line-length = 120
select = [
    "C4",
    "F",
    "G",
    "I",
    "PTH",
    "RUF",
    "SIM",
    "TCH",
    "UP",
    "W",
    "PERF",
]
ignore = [
    "F401",
    "F402",
    "F403",
    "F405",
    "PERF203",
    "RUF001",
    "RUF009",
    "SIM105",
    "UP034",
    "UP038",
]
[tool.ruff.isort]
split-on-trailing-comma = true
combine-as-imports = true

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
allow_redefinition = true
show_error_codes = true
warn_no_return = false
pretty = true

[tool.pyright]
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportSelfClsParameterName = "none"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedNamedTuple = "error"
reportImplicitStringConcatenation = "error"
reportOverlappingOverload = "error"
reportMissingTypeArgument = "error"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
reportMissingImports = "error"
reportUnusedImport = "error"
reportFunctionMemberAccess = "warning"
reportDuplicateImport = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnknownParameterType = "error"
reportUnknownReturnType = "error"
# reportUnknownArgumentType = "error"
reportUnknownMemberType = "error"
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportShadowedImports = "none"
ignore = ["steam/ext/commands", "tests"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[build-system]
requires = ["poetry-core>=1.1.0,<2", "tomli; python_version < '3.11'"]
build-backend = "poetry.core.masonry.api"
